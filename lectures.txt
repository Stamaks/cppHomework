- Контейнеры
vector, list, deque, queue, map

- Адаптеры
stack - на основе vector

- Алгоритмы
отделены от структур

- Итераторы
Итератор - это объект, с помощью которого можно пробегать по коллекции, например, представленной некоторым контейнером, (итератор) который ведет себя как итератор.

Категории итераторов
- output (разыменовывание в левой позиции)
- input (разыменовывание в правой позиции (из трубы итератора в нашу бочку, кек, это как cin))
	- single pass (не гарантируем, что много раз можем разыменовать)
	- Конструктор копирования
	- Деструктор
	- Оператор присваивания
	- !=
- forward
	- Тоже самое (single pass ограничение уходит)
	- i++
- bidirectional
	- Тоже самое
	- i--
- random access
	- Тоже самое
	- Разыменование по индексу

Обычныый указатель на Си массив является random access итератором.

- Коллекции
В коллекции должен быть итератор
iterator begin(), iterator end(), iterator begin() const, cbegin() const,  константный итератор, rbegin(),  reversed iterator, const reversed iterator

Итераторы:
class iterator
{
	Node* _cur;
	T& operator*() {value;}
	bool operator == (const iter other){_cur == oth.cur}
	operator++(int) //постфиксная, префиксная без инта
}
